// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PageInformation;
//
//    var PageInfo = PageInfo.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace PageInformation
{


    public partial class PageInfo
    {
        [JsonProperty("root")]
        public Root Root { get; set; }
    }

    public partial class Root
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("parentName")]
        public ParentName? ParentName { get; set; }

        [JsonProperty("children")]
        public Root[] Children { get; set; }

        [JsonProperty("pageRef")]
        public PageRef PageRef { get; set; }
    }

    public partial class PageRef
    {
        [JsonProperty("oid")]
        public string Oid { get; set; }

        [JsonProperty("pageIdentifier")]
        public string PageIdentifier { get; set; }

        [JsonProperty("isPublished")]
        public bool IsPublished { get; set; }
    }

    public enum ParentName { Australasia, NewZealand };

    public partial class PageInfo
    {
        public static PageInfo FromJson(string json) => JsonConvert.DeserializeObject<PageInfo>(json, PageInformation.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PageInfo self) => JsonConvert.SerializeObject(self, PageInformation.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ParentNameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParentNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParentName) || t == typeof(ParentName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Australasia":
                    return ParentName.Australasia;
                case "New Zealand":
                    return ParentName.NewZealand;
            }
            throw new Exception("Cannot unmarshal type ParentName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParentName)untypedValue;
            switch (value)
            {
                case ParentName.Australasia:
                    serializer.Serialize(writer, "Australasia");
                    return;
                case ParentName.NewZealand:
                    serializer.Serialize(writer, "New Zealand");
                    return;
            }
            throw new Exception("Cannot marshal type ParentName");
        }

        public static readonly ParentNameConverter Singleton = new ParentNameConverter();
    }
}
